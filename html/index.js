// Generated by psc-bundle 0.11.4
var PS = {};
(function(exports) {
    "use strict";

  // module Audio.Howler

  exports.newHowl = function(props) {
      return function() {
	  return new Howl(props);
      };
  };

  exports.playHowl = function(obj) {
      return function() {
          return obj.play();
      };
  };
})(PS["Audio.Howler"] = PS["Audio.Howler"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                       
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $33 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($33) {
                  return Data_Semiring.one(dictRing.Semiring0());
              };
              return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 123, column 3 - line 126, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["lessThan"] = lessThan;
  exports["max"] = max;
  exports["signum"] = signum;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  exports.intDiv = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      return x % y;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];        
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function (__copy_dictEq) {
      return function (__copy_dictEuclideanRing) {
          return function (__copy_a) {
              return function (__copy_b) {
                  var __tco_dictEq = __copy_dictEq;
                  var __tco_dictEuclideanRing = __copy_dictEuclideanRing;
                  var __tco_a = __copy_a;
                  var __tco_done = false;
                  var __tco_result;
                  function __tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($7) {
                          __tco_done = true;
                          return a;
                      };
                      __tco_dictEq = dictEq;
                      __tco_dictEuclideanRing = dictEuclideanRing;
                      __tco_a = b;
                      __copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!__tco_done) {
                      __tco_result = __tco_loop(__tco_dictEq, __tco_dictEuclideanRing, __tco_a, __copy_b);
                  };
                  return __tco_result;
              };
          };
      };
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["gcd"] = gcd;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };       
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 220, column 1 - line 220, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["isNothing"] = isNothing;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Audio.Howler"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];                  
  var play = $foreign.playHowl;  
  var $$new = function (props) {
      return $foreign.newHowl((function () {
          var $1 = {};
          for (var $2 in props) {
              if ({}.hasOwnProperty.call(props, $2)) {
                  $1[$2] = props[$2];
              };
          };
          $1.format = Data_Nullable.toNullable(props.format);
          return $1;
      })());
  };                           
  var defaultProps = {
      urls: [  ], 
      format: Data_Maybe.Nothing.value, 
      volume: 1.0, 
      rate: 1.0, 
      autoplay: false, 
      loop: false, 
      buffer: false
  };
  exports["defaultProps"] = defaultProps;
  exports["new"] = $$new;
  exports["play"] = play;
})(PS["Audio.Howler"] = PS["Audio.Howler"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Unit = PS["Data.Unit"];        
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["defer"] = defer;
  exports["fix"] = fix;
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setTimeout = function (ms) {
    return function (fn) {
      return function () {
        return setTimeout(fn, ms);
      };
    };
  };

  exports.setInterval = function (ms) {
    return function (fn) {
      return function () {
        return setInterval(fn, ms);
      };
    };
  };
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Timer"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  exports["setInterval"] = $foreign.setInterval;
  exports["setTimeout"] = $foreign.setTimeout;
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var over = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($62) {
                      return wrap(dictNewtype1)(f(unwrap(dictNewtype)($62)));
                  };
              };
          };
      };
  };
  exports["Newtype"] = Newtype;
  exports["over"] = over;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($175) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($175));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  exports.round = Math.round;

  exports.sin = Math.sin;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Math"];
  exports["pi"] = $foreign.pi;
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 63, column 1 - line 68, column 43: " + [ x.constructor.name ]);
  };
  var round = function ($2) {
      return unsafeClamp($$Math.round($2));
  };
  exports["fromNumber"] = fromNumber;
  exports["round"] = round;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";

  exports.defer = function () {

    function Defer(thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      this.thunk = null;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  exports["functorLazy"] = functorLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();            
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($116) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($116));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var __tco_b = __copy_b;
              var __tco_done = false;
              var __tco_result;
              function __tco_loop(b, v) {
                  if (v instanceof Nil) {
                      __tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      __tco_b = f(b)(v.value0);
                      __copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 76, column 12 - line 78, column 30: " + [ v.constructor.name ]);
              };
              while (!__tco_done) {
                  __tco_result = __tco_loop(__tco_b, __copy_v);
              };
              return __tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = function (__copy_acc) {
              return function (__copy_v) {
                  var __tco_acc = __copy_acc;
                  var __tco_done = false;
                  var __tco_result;
                  function __tco_loop(acc, v) {
                      if (v instanceof Nil) {
                          __tco_done = true;
                          return acc;
                      };
                      if (v instanceof Cons) {
                          __tco_acc = new Cons(v.value0, acc);
                          __copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 71, column 15 - line 73, column 33: " + [ v.constructor.name ]);
                  };
                  while (!__tco_done) {
                      __tco_result = __tco_loop(__tco_acc, __copy_v);
                  };
                  return __tco_result;
              };
          };
          return function ($117) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)($117));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });                                                                  
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  exports["singleton"] = singleton;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));             
  var newtypeList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, List);
  var step = function ($165) {
      return Data_Lazy.force(Data_Newtype.unwrap(newtypeList)($165));
  };
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return step(ys);
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types line 96, column 5 - line 96, column 21: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
      };
  });     
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function ($166) {
          return step(f($166));
      }));
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types line 105, column 5 - line 105, column 17: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
      };
  });
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (b) {
              return function (a) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (op) {
      var go = function (__copy_b) {
          return function (__copy_xs) {
              var __tco_b = __copy_b;
              var __tco_done = false;
              var __tco_result;
              function __tco_loop(b, xs) {
                  var v = step(xs);
                  if (v instanceof Nil) {
                      __tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      __tco_b = op(b)(v.value0);
                      __copy_xs = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types line 117, column 7 - line 119, column 40: " + [ v.constructor.name ]);
              };
              while (!__tco_done) {
                  __tco_result = __tco_loop(__tco_b, __copy_xs);
              };
              return __tco_result;
          };
      };
      return go;
  }, function (op) {
      return function (z) {
          return function (xs) {
              var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
          };
      };
  });
  var monadList = new Control_Monad.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (xs) {
      return function (f) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return step(Data_Semigroup.append(semigroupList)(f(v.value0))(Control_Bind.bind(bindList)(v.value1)(f)));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types line 144, column 5 - line 144, column 17: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, Control_Monad.ap(monadList));
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return cons(a)(nil);
  });
  exports["List"] = List;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["cons"] = cons;
  exports["nil"] = nil;
  exports["step"] = step;
  exports["newtypeList"] = newtypeList;
  exports["lazyList"] = lazyList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
})(PS["Data.List.Lazy.Types"] = PS["Data.List.Lazy.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                                                 
  var uncons = function (xs) {
      var v = Data_List_Lazy_Types.step(xs);
      if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Lazy_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0, 
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List.Lazy line 281, column 13 - line 283, column 44: " + [ v.constructor.name ]);
  };
  var tail = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.tail;
      })(uncons(xs));
  };
  var span = function (p) {
      return function (xs) {
          var v = uncons(xs);
          if (v instanceof Data_Maybe.Just && p(v.value0.head)) {
              var v1 = span(p)(v.value0.tail);
              return {
                  init: Data_List_Lazy_Types.cons(v.value0.head)(v1.init), 
                  rest: v1.rest
              };
          };
          return {
              init: Data_List_Lazy_Types.nil, 
              rest: xs
          };
      };
  };
  var $$null = function ($202) {
      return Data_Maybe.isNothing(uncons($202));
  };   
  var iterate = function (f) {
      return function (x) {
          return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
              return Data_List_Lazy_Types.cons(x)(Data_Functor.map(Data_List_Lazy_Types.functorList)(f)(xs));
          });
      };
  };
  var init = (function () {
      var go = function (v) {
          if (v instanceof Data_List_Lazy_Types.Cons) {
              if ($$null(v.value1)) {
                  return new Data_Maybe.Just(Data_List_Lazy_Types.nil);
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_Lazy_Types.cons(v.value0))(go(Data_List_Lazy_Types.step(v.value1)));
              };
          };
          return Data_Maybe.Nothing.value;
      };
      return function ($205) {
          return go(Data_List_Lazy_Types.step($205));
      };
  })();
  var head = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.head;
      })(uncons(xs));
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.nil);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["head"] = head;
  exports["init"] = init;
  exports["iterate"] = iterate;
  exports["span"] = span;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
})(PS["Data.List.Lazy"] = PS["Data.List.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];        
  var Ratio = (function () {
      function Ratio(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ratio.create = function (value0) {
          return function (value1) {
              return new Ratio(value0, value1);
          };
      };
      return Ratio;
  })();
  var semiringRatio = function (dictSemiring) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return new Ratio(Data_Semiring.add(dictSemiring)(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value1))(Data_Semiring.mul(dictSemiring)(v.value1)(v1.value0)), Data_Semiring.mul(dictSemiring)(v.value1)(v1.value1));
          };
      }, function (v) {
          return function (v1) {
              return new Ratio(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring)(v.value1)(v1.value1));
          };
      }, new Ratio(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring)), new Ratio(Data_Semiring.zero(dictSemiring), Data_Semiring.one(dictSemiring)));
  };
  var ringRatio = function (dictRing) {
      return new Data_Ring.Ring(function () {
          return semiringRatio(dictRing.Semiring0());
      }, function (v) {
          return function (v1) {
              return new Ratio(Data_Ring.sub(dictRing)(Data_Semiring.mul(dictRing.Semiring0())(v.value0)(v1.value1))(Data_Semiring.mul(dictRing.Semiring0())(v.value1)(v1.value0)), Data_Semiring.mul(dictRing.Semiring0())(v.value1)(v1.value1));
          };
      });
  };
  var commutativeRingRatio = function (dictCommutativeRing) {
      return new Data_CommutativeRing.CommutativeRing(function () {
          return ringRatio(dictCommutativeRing.Ring0());
      });
  };
  var euclideanRingRatio = function (dictCommutativeRing) {
      return function (dictSemiring) {
          return new Data_EuclideanRing.EuclideanRing(function () {
              return commutativeRingRatio(dictCommutativeRing);
          }, function (v) {
              return 1;
          }, function (v) {
              return function (v1) {
                  return new Ratio(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value1), Data_Semiring.mul(dictSemiring)(v.value1)(v1.value0));
              };
          }, function (v) {
              return function (v1) {
                  return Data_Semiring.zero(semiringRatio(dictSemiring));
              };
          });
      };
  };
  exports["Ratio"] = Ratio;
  exports["semiringRatio"] = semiringRatio;
  exports["ringRatio"] = ringRatio;
  exports["commutativeRingRatio"] = commutativeRingRatio;
  exports["euclideanRingRatio"] = euclideanRingRatio;
})(PS["Data.Ratio"] = PS["Data.Ratio"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ratio = PS["Data.Ratio"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Rational = function (x) {
      return x;
  };
  var toNumber = function (v) {
      return Data_Int.toNumber(v.value0) / Data_Int.toNumber(v.value1);
  };
  var reduce = function (v) {
      var g = Data_EuclideanRing.gcd(Data_Eq.eqInt)(Data_EuclideanRing.euclideanRingInt)(v.value0)(v.value1);
      var b$prime = v.value1 / g | 0;
      return Rational(new Data_Ratio.Ratio((v.value0 / g | 0) * Data_Ord.signum(Data_Ord.ordInt)(Data_Ring.ringInt)(b$prime) | 0, Data_EuclideanRing.degree(Data_EuclideanRing.euclideanRingInt)(b$prime)));
  };
  var semiringRational = new Data_Semiring.Semiring(function (v) {
      return function (v1) {
          return reduce(Rational(Data_Semiring.add(Data_Ratio.semiringRatio(Data_Semiring.semiringInt))(v)(v1)));
      };
  }, function (v) {
      return function (v1) {
          return reduce(Rational(Data_Semiring.mul(Data_Ratio.semiringRatio(Data_Semiring.semiringInt))(v)(v1)));
      };
  }, Data_Semiring.one(Data_Ratio.semiringRatio(Data_Semiring.semiringInt)), Data_Semiring.zero(Data_Ratio.semiringRatio(Data_Semiring.semiringInt)));
  var ringRational = new Data_Ring.Ring(function () {
      return semiringRational;
  }, function (v) {
      return function (v1) {
          return reduce(Rational(Data_Ring.sub(Data_Ratio.ringRatio(Data_Ring.ringInt))(v)(v1)));
      };
  });
  var rational = function (x) {
      return function (y) {
          return reduce(Rational(new Data_Ratio.Ratio(x, y)));
      };
  };
  var fromInt = function (i) {
      return Rational(new Data_Ratio.Ratio(i, 1));
  };
  var eqRational = new Data_Eq.Eq(function (x) {
      return function (y) {
          var eq$prime = function (v) {
              return function (v1) {
                  return v.value0 === v1.value0 && v.value1 === v1.value1;
              };
          };
          return eq$prime(reduce(x))(reduce(y));
      };
  });
  var ordRational = new Data_Ord.Ord(function () {
      return eqRational;
  }, function (v) {
      return function (v1) {
          var v2 = Data_EuclideanRing.div(Data_Ratio.euclideanRingRatio(Data_CommutativeRing.commutativeRingInt)(Data_Semiring.semiringInt))(v)(v1);
          return Data_Ord.compare(Data_Ord.ordInt)(v2.value0)(v2.value1);
      };
  });
  var commutativeRingRational = new Data_CommutativeRing.CommutativeRing(function () {
      return ringRational;
  });
  var euclideanRingRational = new Data_EuclideanRing.EuclideanRing(function () {
      return commutativeRingRational;
  }, function (v) {
      return Data_EuclideanRing.degree(Data_Ratio.euclideanRingRatio(Data_CommutativeRing.commutativeRingInt)(Data_Semiring.semiringInt))(v);
  }, function (v) {
      return function (v1) {
          return Rational(Data_EuclideanRing.div(Data_Ratio.euclideanRingRatio(Data_CommutativeRing.commutativeRingInt)(Data_Semiring.semiringInt))(v)(v1));
      };
  }, function (v) {
      return function (v1) {
          return Data_Semiring.zero(Data_Ratio.semiringRatio(Data_Semiring.semiringInt));
      };
  });
  exports["fromInt"] = fromInt;
  exports["rational"] = rational;
  exports["toNumber"] = toNumber;
  exports["eqRational"] = eqRational;
  exports["ordRational"] = ordRational;
  exports["semiringRational"] = semiringRational;
  exports["ringRational"] = ringRational;
  exports["commutativeRingRational"] = commutativeRingRational;
  exports["euclideanRingRational"] = euclideanRingRational;
})(PS["Data.Rational"] = PS["Data.Rational"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Audio_Howler = PS["Audio.Howler"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Rational = PS["Data.Rational"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Track = function (x) {
      return x;
  };
  var Dur = (function () {
      function Dur(value0) {
          this.value0 = value0;
      };
      Dur.create = function (value0) {
          return new Dur(value0);
      };
      return Dur;
  })();
  var BPM = (function () {
      function BPM(value0) {
          this.value0 = value0;
      };
      BPM.create = function (value0) {
          return new BPM(value0);
      };
      return BPM;
  })();
  var Playable = function (x) {
      return x;
  };
  var track = function (v) {
      return Playable(function (bark) {
          return function __do() {
              var v1 = Control_Monad_Eff_Ref.newRef(0)();
              var v2 = Control_Monad_Eff_Ref.newRef(v)();
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Timer.setInterval(1000)(function __do() {
                  var v3 = Control_Monad_Eff_Ref.readRef(v1)();
                  var v4 = Control_Monad_Eff_Ref.readRef(v2)();
                  var cutoff = (v3 + 1 | 0) * 1000 | 0;
                  var v5 = Data_List_Lazy.span(function (x) {
                      return x.time < cutoff;
                  })(v4);
                  Control_Monad_Eff_Ref.writeRef(v1)(v3 + 1 | 0)();
                  Control_Monad_Eff_Ref.writeRef(v2)(v5.rest)();
                  return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List_Lazy_Types.foldableList)(v5.init)(function (v6) {
                      return Control_Monad_Eff_Timer.setTimeout(v6.time - (v3 * 1000 | 0) | 0)(bark(v6.sample));
                  })();
              }))();
          };
      });
  };
  var swing = function (strength) {
      return function (x) {
          return x + $$Math.sin(0.5 * $$Math.pi * x) / strength;
      };
  };
  var silence = {
      length: Data_Rational.rational(1)(1), 
      values: Data_Monoid.mempty(Data_List_Types.monoidList)
  };
  var semigroupPassage = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return {
              length: Data_Semiring.add(Data_Rational.semiringRational)(v.length)(v1.length), 
              values: Data_Semigroup.append(Data_List_Types.semigroupList)(v.values)(Data_Functor.map(Data_List_Types.functorList)(function (v2) {
                  return {
                      sample: v2.sample, 
                      offset: Data_Semiring.add(Data_Rational.semiringRational)(v.length)(v2.offset)
                  };
              })(v1.values))
          };
      };
  });
  var playWith = function (g) {
      return function (v) {
          return v(function ($81) {
              return Audio_Howler.play(g($81));
          });
      };
  };
  var play = playWith(Control_Category.id(Control_Category.categoryFn));
  var newtypeTrack = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Track);
  var warp = function (v) {
      var f$prime = function (t) {
          var x = v(Data_Int.toNumber(t) / 1000.0);
          return Data_Int.round(x * 1000.0);
      };
      return Data_Newtype.over(newtypeTrack)(newtypeTrack)(Track)(Data_Functor.map(Data_List_Lazy_Types.functorList)(function (v1) {
          return {
              sample: v1.sample, 
              time: f$prime(v1.time)
          };
      }));
  };        
  var monoidPassage = new Data_Monoid.Monoid(function () {
      return semigroupPassage;
  }, {
      length: Data_Rational.rational(0)(1), 
      values: Data_Monoid.mempty(Data_List_Types.monoidList)
  });
  var merge = (function () {
      var go = function (v) {
          return function (v1) {
              if (v instanceof Data_List_Types.Nil) {
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return v;
              };
              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  if (Data_Ord.lessThan(Data_Rational.ordRational)(v.value0.offset)(v1.value0.offset)) {
                      return new Data_List_Types.Cons({
                          sample: v.value0.sample, 
                          offset: v.value0.offset
                      }, go(v.value1)(v1));
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_List_Types.Cons({
                          sample: v1.value0.sample, 
                          offset: v1.value0.offset
                      }, go(v)(v1.value1));
                  };
              };
              throw new Error("Failed pattern match at Loops line 66, column 5 - line 66, column 19: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      return function (v) {
          return function (v1) {
              return {
                  length: Data_Ord.max(Data_Rational.ordRational)(v.length)(v1.length), 
                  values: go(v.values)(v1.values)
              };
          };
      };
  })();                                                                  
  var durMs = function (v) {
      if (v instanceof Dur) {
          return Data_Semiring.mul(Data_Rational.semiringRational)(v.value0)(Data_Rational.fromInt(1000));
      };
      if (v instanceof BPM) {
          return Data_EuclideanRing.div(Data_Rational.euclideanRingRational)(Data_Rational.fromInt(60000))(v.value0);
      };
      throw new Error("Failed pattern match at Loops line 151, column 1 - line 152, column 1: " + [ v.constructor.name ]);
  };
  var loop = function (dur) {
      return function (v) {
          return Control_Bind.bind(Data_List_Lazy_Types.bindList)(Data_List_Lazy.iterate(function (v1) {
              return v1 + 1 | 0;
          })(0))(function (v1) {
              return Data_List_Lazy.fromFoldable(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(function (v2) {
                  return {
                      sample: v2.sample, 
                      time: Data_Int.round(Data_Rational.toNumber(Data_Semiring.mul(Data_Rational.semiringRational)(durMs(dur))(Data_Semiring.add(Data_Rational.semiringRational)(Data_Semiring.mul(Data_Rational.semiringRational)(Data_Rational.fromInt(v1))(v.length))(v2.offset))))
                  };
              })(v.values));
          });
      };
  };
  var beat = function (s) {
      return {
          length: Data_Rational.rational(1)(1), 
          values: Data_List.singleton({
              offset: Data_Rational.rational(0)(1), 
              sample: s
          })
      };
  };
  exports["Dur"] = Dur;
  exports["BPM"] = BPM;
  exports["beat"] = beat;
  exports["loop"] = loop;
  exports["merge"] = merge;
  exports["play"] = play;
  exports["playWith"] = playWith;
  exports["silence"] = silence;
  exports["swing"] = swing;
  exports["track"] = track;
  exports["warp"] = warp;
  exports["semigroupPassage"] = semigroupPassage;
  exports["monoidPassage"] = monoidPassage;
  exports["newtypeTrack"] = newtypeTrack;
})(PS["Loops"] = PS["Loops"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Audio_Howler = PS["Audio.Howler"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Loops = PS["Loops"];
  var Prelude = PS["Prelude"];        
  var dirt = function (dir) {
      var createSample = function (path) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Loops.beat)(Audio_Howler["new"]((function () {
              var $198 = {};
              for (var $199 in Audio_Howler.defaultProps) {
                  if ({}.hasOwnProperty.call(Audio_Howler.defaultProps, $199)) {
                      $198[$199] = Audio_Howler["defaultProps"][$199];
                  };
              };
              $198.urls = [ dir + path ];
              return $198;
          })()));
      };
      return function __do() {
          var v = createSample("808/CB.WAV")();
          var v1 = createSample("808bd/BD0000.WAV")();
          var v2 = createSample("808cy/CY0000.WAV")();
          var v3 = createSample("808hc/HC00.WAV")();
          var v4 = createSample("808ht/HT00.WAV")();
          var v5 = createSample("808lc/LC00.WAV")();
          var v6 = createSample("808lt/LT00.WAV")();
          var v7 = createSample("808mc/MC00.WAV")();
          var v8 = createSample("808mt/MT00.WAV")();
          var v9 = createSample("808oh/OH00.WAV")();
          var v10 = createSample("808sd/SD0000.WAV")();
          var v11 = createSample("909/BT0A0A7.WAV")();
          var v12 = createSample("ab/000_ab2closedhh.wav")();
          var v13 = createSample("ade/000_011112-bassline.wav")();
          var v14 = createSample("ades2/000_01.wav")();
          var v15 = createSample("ades3/01.wav")();
          var v16 = createSample("ades4/01.wav")();
          var v17 = createSample("alex/000_drumx1.wav")();
          var v18 = createSample("alphabet/a.wav")();
          var v19 = createSample("amencutup/000_AMENCUT_001.wav")();
          var v20 = createSample("armora/000_beep.wav")();
          var v21 = createSample("arp/000_arp2.wav")();
          var v22 = createSample("arpy/arpy01.wav")();
          var v23 = createSample("auto/break-kick.wav")();
          var v24 = createSample("baa/1.wav")();
          var v25 = createSample("baa2/1.wav")();
          var v26 = createSample("bass/000_bass1.wav")();
          var v27 = createSample("bass0/000_0.wav")();
          var v28 = createSample("bass1/18076__daven__01-sb-bass-hit-c.wav")();
          var v29 = createSample("bass2/69988__noizemassacre__hardcore-bass-1.wav")();
          var v30 = createSample("bass3/83245__zgump__bass-0201.wav")();
          var v31 = createSample("bassdm/000_BT0A0A7.WAV.ews")();
          var v32 = createSample("bassfoo/000_0.wav")();
          var v33 = createSample("battles/000_explo1.wav")();
          var v34 = createSample("bd/BT0A0A7.wav")();
          var v35 = createSample("bend/000_2.wav")();
          var v36 = createSample("bev/00-mono.wav")();
          var v37 = createSample("bin/000_bin1.wav")();
          var v38 = createSample("birds3/000_1.wav")();
          var v39 = createSample("bleep/boip.wav")();
          var v40 = createSample("blip/000_blipp01.wav")();
          var v41 = createSample("blue/aya.wav")();
          var v42 = createSample("bottle/000_1.wav")();
          var v43 = createSample("breaks125/015_sdstckbr.wav")();
          var v44 = createSample("breaks152/000_AMEN.WAV")();
          var v45 = createSample("breaks157/000_PLEAD.WAV")();
          var v46 = createSample("breaks165/000_RAWCLN.WAV")();
          var v47 = createSample("breath/000_breath.wav")();
          var v48 = createSample("bubble/000_bub0.wav")();
          var v49 = createSample("can/000_1.wav")();
          var v50 = createSample("casio/high.wav")();
          var v51 = createSample("cc/CSHD0.wav")();
          var v52 = createSample("chin/000_tik1.wav")();
          var v53 = createSample("chink/000_chink.wav")();
          var v54 = createSample("circus/000_bounce.wav")();
          var v55 = createSample("clak/000_clak1.wav")();
          var v56 = createSample("click/000_click0.wav")();
          var v57 = createSample("co/CLOP1.wav")();
          var v58 = createSample("cosmicg/000_cg_att.wav")();
          var v59 = createSample("cp/HANDCLP0.wav")();
          var v60 = createSample("cr/RIDED0.wav")();
          var v61 = createSample("crow/000_crow.wav")();
          var v62 = createSample("d/000_d1.wav")();
          var v63 = createSample("db/dbs12closedhh.wav")();
          var v64 = createSample("diphone/000_kd1_002.wav")();
          var v65 = createSample("diphone2/000_kd1_399.wav")();
          var v66 = createSample("dist/000_inddistb1.wav")();
          var v67 = createSample("dork2/0.wav")();
          var v68 = createSample("dorkbot/1.wav")();
          var v69 = createSample("dr/000_002.WAV")();
          var v70 = createSample("dr2/000_DR110CHT.WAV")();
          var v71 = createSample("dr55/000_DR55 hi hat.wav")();
          var v72 = createSample("dr_few/000_001.WAV")();
          var v73 = createSample("drum/000_drum1.wav")();
          var v74 = createSample("drumtraks/000_DT Cabasa.wav")();
          var v75 = createSample("e/000_e1.wav")();
          var v76 = createSample("east/nipon_wood_block.wav")();
          var v77 = createSample("electro1/000_et1closedhh.wav")();
          var v78 = createSample("erk/000_123.wav")();
          var v79 = createSample("f/000_f.wav")();
          var v80 = createSample("feel/BD 04 d.wav")();
          var v81 = createSample("feelfx/blnk.wav")();
          var v82 = createSample("fest/000_foo.wav")();
          var v83 = createSample("fire/fire.wav")();
          var v84 = createSample("flick/000_square-p.wav")();
          var v85 = createSample("foo/000_samthfdbrk.wav")();
          var v86 = createSample("future/000_808KICK4.wav")();
          var v87 = createSample("gab/gab01.wav")();
          var v88 = createSample("gabba/000_0.wav")();
          var v89 = createSample("gabbaloud/000_0.wav")();
          var v90 = createSample("gabbalouder/000_0.wav")();
          var v91 = createSample("glasstap/000_0.wav")();
          var v92 = createSample("glitch/000_BD.wav")();
          var v93 = createSample("glitch2/000_BD.wav")();
          var v94 = createSample("gretsch/brushhitom.wav")();
          var v95 = createSample("h/0_da0-200%_1000_0_R.wav")();
          var v96 = createSample("hand/hand1-mono.wav")();
          var v97 = createSample("hardcore/000_hcclosedhh.wav")();
          var v98 = createSample("haw/hawaiian-hh.wav")();
          var v99 = createSample("hc/HHCD0.wav")();
          var v100 = createSample("hh/000_hh3closedhh.wav")();
          var v101 = createSample("hh27/000_hh27closedhh.wav")();
          var v102 = createSample("hit/bandpass-blart.wav")();
          var v103 = createSample("hmm/hmm.wav")();
          var v104 = createSample("ho/HHOD0.wav")();
          var v105 = createSample("house/000_BD.wav")();
          var v106 = createSample("ht/HT0D0.wav")();
          var v107 = createSample("if/gab.wav")();
          var v108 = createSample("ifdrums/ignorebd.wav")();
          var v109 = createSample("incoming/000_Mattel  Snare.wav")();
          var v110 = createSample("industrial/000_01.wav")();
          var v111 = createSample("insect/000_everglades_conehead.wav")();
          var v112 = createSample("invaders/000_0.wav")();
          var v113 = createSample("jazz/000_BD.wav")();
          var v114 = createSample("jungbass/deeep_n_low.wav")();
          var v115 = createSample("jungle/jungle4closedhh.wav")();
          var v116 = createSample("jvbass/000_01.wav")();
          var v117 = createSample("koy/01_left.wav")();
          var v118 = createSample("kurt/000_kurt01.wav")();
          var v119 = createSample("latibro/000_Sound2.wav")();
          var v120 = createSample("led/000_foo.wav")();
          var v121 = createSample("less/bass2.wav")();
          var v122 = createSample("lighter/000_0.wav")();
          var v123 = createSample("lt/LT0D0.wav")();
          var v124 = createSample("made/0.wav")();
          var v125 = createSample("made2/output.wav")();
          var v126 = createSample("mash/0.wav")();
          var v127 = createSample("mash2/output.wav")();
          var v128 = createSample("metal/000_0.wav")();
          var v129 = createSample("miniyeah/000_Sound0.wav")();
          var v130 = createSample("moan/000_0_moan2.wav")();
          var v131 = createSample("monsterb/000_jumpdown.wav")();
          var v132 = createSample("moog/000_Mighty Moog C2.wav")();
          var v133 = createSample("mouth/000_1.wav")();
          var v134 = createSample("mp3/000_mp30.wav")();
          var v135 = createSample("msg/000_msg0.wav")();
          var v136 = createSample("mt/MT0D0.wav")();
          var v137 = createSample("newnotes/000_0.wav")();
          var v138 = createSample("noise/000_noise.wav")();
          var v139 = createSample("noise2/000_0.wav")();
          var v140 = createSample("notes/000_0.wav")();
          var v141 = createSample("numbers/0.wav")();
          var v142 = createSample("oc/OPCL1.wav")();
          var v143 = createSample("odx/000_Kick_1.wav")();
          var v144 = createSample("off/000_01.wav")();
          var v145 = createSample("pad/alien-monolith-pad.wav")();
          var v146 = createSample("padlong/atmospheric-abduction.wav")();
          var v147 = createSample("pebbles/90788__kmoon__pebbles-scrape-drag-foot.wav")();
          var v148 = createSample("perc/000_perc0.wav")();
          var v149 = createSample("peri/bd-rev.wav")();
          var v150 = createSample("print/0.wav")();
          var v151 = createSample("proc/000_2.wav")();
          var v152 = createSample("procshort/000_1.wav")();
          var v153 = createSample("psr/000_01.wav")();
          var v154 = createSample("rave/AREUREADY.wav")();
          var v155 = createSample("rave2/electric_ping01.ogg")();
          var v156 = createSample("ravemono/Babylon.wav")();
          var v157 = createSample("rm/RIM0.wav")();
          var v158 = createSample("sax/000_notes121a.wav")();
          var v159 = createSample("seawolf/000_minehit.wav")();
          var v160 = createSample("sequential/000_Tom Clap.wav")();
          var v161 = createSample("sf/000_bass.wav")();
          var v162 = createSample("sheffield/jakeinsects.wav")();
          var v163 = createSample("short/sampleoftheday-gtt-fx-synth-009.wav")();
          var v164 = createSample("sid/000_bas2.wav")();
          var v165 = createSample("sine/000_sine.wav")();
          var v166 = createSample("sitar/000_d_maj_sitar_chorda.wav")();
          var v167 = createSample("sn/ST0T0S0.wav")();
          var v168 = createSample("space/000_0.wav")();
          var v169 = createSample("speech/000_Sound10.wav")();
          var v170 = createSample("speechless/......wav")();
          var v171 = createSample("speedupdown/000_Sound20.wav")();
          var v172 = createSample("stab/000_stab1.wav")();
          var v173 = createSample("stomp/000_0.wav")();
          var v174 = createSample("subroc3d/000_01.wav")();
          var v175 = createSample("sugar/000_bark.wav")();
          var v176 = createSample("sundance/000_bong.wav")();
          var v177 = createSample("tabla/000_bass_flick1.wav")();
          var v178 = createSample("tabla2/23645_loofa_A_001.wav")();
          var v179 = createSample("tablex/0.wav")();
          var v180 = createSample("tacscan/000_01.wav")();
          var v181 = createSample("tech/tn1closedhh.wav")();
          var v182 = createSample("techno/000_0.wav")();
          var v183 = createSample("tink/000_tink1.wav")();
          var v184 = createSample("tok/000_0.wav")();
          var v185 = createSample("toys/ClassicalMusic-Notes.wav")();
          var v186 = createSample("trump/tightstabb.wav")();
          var v187 = createSample("ul/beep.wav")();
          var v188 = createSample("ulgab/gab1.wav")();
          var v189 = createSample("uxay/000_bar.wav")();
          var v190 = createSample("v/000_b_blipp01.wav")();
          var v192 = createSample("voodoo/000_VoodooBass.wav")();
          var v193 = createSample("wind/000_wind1.wav")();
          var v194 = createSample("wobble/000_0.wav")();
          var v195 = createSample("world/bd.wav")();
          var v196 = createSample("xmas/170535__cognito-perceptu__merry-christmas.wav")();
          var v197 = createSample("yeah/000_Sound0.wav")();
          return {
              _808: v, 
              _808bd: v1, 
              _808cy: v2, 
              _808hc: v3, 
              _808ht: v4, 
              _808lc: v5, 
              _808lt: v6, 
              _808mc: v7, 
              _808mt: v8, 
              _808oh: v9, 
              _808sd: v10, 
              _909: v11, 
              ab: v12, 
              ade: v13, 
              ades2: v14, 
              ades3: v15, 
              ades4: v16, 
              alex: v17, 
              alphabet: v18, 
              amencutup: v19, 
              armora: v20, 
              arp: v21, 
              arpy: v22, 
              auto: v23, 
              baa: v24, 
              baa2: v25, 
              bass: v26, 
              bass0: v27, 
              bass1: v28, 
              bass2: v29, 
              bass3: v30, 
              bassdm: v31, 
              bassfoo: v32, 
              battles: v33, 
              bd: v34, 
              bend: v35, 
              bev: v36, 
              bin: v37, 
              birds3: v38, 
              bleep: v39, 
              blip: v40, 
              blue: v41, 
              bottle: v42, 
              breaks125: v43, 
              breaks152: v44, 
              breaks157: v45, 
              breaks165: v46, 
              breath: v47, 
              bubble: v48, 
              can: v49, 
              casio: v50, 
              cc: v51, 
              chin: v52, 
              chink: v53, 
              circus: v54, 
              clak: v55, 
              click: v56, 
              co: v57, 
              cosmicg: v58, 
              cp: v59, 
              cr: v60, 
              crow: v61, 
              d: v62, 
              db: v63, 
              diphone: v64, 
              diphone2: v65, 
              dist: v66, 
              dork2: v67, 
              dorkbot: v68, 
              dr: v69, 
              dr2: v70, 
              dr55: v71, 
              dr_few: v72, 
              drum: v73, 
              drumtraks: v74, 
              e: v75, 
              east: v76, 
              electro1: v77, 
              erk: v78, 
              f: v79, 
              feel: v80, 
              feelfx: v81, 
              fest: v82, 
              fire: v83, 
              flick: v84, 
              foo: v85, 
              future: v86, 
              gab: v87, 
              gabba: v88, 
              gabbaloud: v89, 
              gabbalouder: v90, 
              glasstap: v91, 
              glitch: v92, 
              glitch2: v93, 
              gretsch: v94, 
              h: v95, 
              hand: v96, 
              hardcore: v97, 
              haw: v98, 
              hc: v99, 
              hh: v100, 
              hh27: v101, 
              hit: v102, 
              hmm: v103, 
              ho: v104, 
              house: v105, 
              ht: v106, 
              _if: v107, 
              ifdrums: v108, 
              incoming: v109, 
              industrial: v110, 
              insect: v111, 
              invaders: v112, 
              jazz: v113, 
              jungbass: v114, 
              jungle: v115, 
              jvbass: v116, 
              koy: v117, 
              kurt: v118, 
              latibro: v119, 
              led: v120, 
              less: v121, 
              lighter: v122, 
              lt: v123, 
              made: v124, 
              made2: v125, 
              mash: v126, 
              mash2: v127, 
              metal: v128, 
              miniyeah: v129, 
              moan: v130, 
              monsterb: v131, 
              moog: v132, 
              mouth: v133, 
              mp3: v134, 
              msg: v135, 
              mt: v136, 
              newnotes: v137, 
              noise: v138, 
              noise2: v139, 
              notes: v140, 
              numbers: v141, 
              oc: v142, 
              odx: v143, 
              off: v144, 
              pad: v145, 
              padlong: v146, 
              pebbles: v147, 
              perc: v148, 
              peri: v149, 
              print: v150, 
              proc: v151, 
              procshort: v152, 
              psr: v153, 
              rave: v154, 
              rave2: v155, 
              ravemono: v156, 
              rm: v157, 
              sax: v158, 
              seawolf: v159, 
              sequential: v160, 
              sf: v161, 
              sheffield: v162, 
              "short": v163, 
              sid: v164, 
              sine: v165, 
              sitar: v166, 
              sn: v167, 
              space: v168, 
              speech: v169, 
              speechless: v170, 
              speedupdown: v171, 
              stab: v172, 
              stomp: v173, 
              subroc3d: v174, 
              sugar: v175, 
              sundance: v176, 
              tabla: v177, 
              tabla2: v178, 
              tablex: v179, 
              tacscan: v180, 
              tech: v181, 
              techno: v182, 
              tink: v183, 
              tok: v184, 
              toys: v185, 
              trump: v186, 
              ul: v187, 
              ulgab: v188, 
              uxay: v189, 
              v: v190, 
              voodoo: v192, 
              wind: v193, 
              wobble: v194, 
              world: v195, 
              xmas: v196, 
              yeah: v197
          };
      };
  };
  exports["dirt"] = dirt;
})(PS["Dirt"] = PS["Dirt"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Rational = PS["Data.Rational"];
  var Dirt = PS["Dirt"];
  var Loops = PS["Loops"];
  var Prelude = PS["Prelude"];        
  var main = Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
      var v = Dirt.dirt("../Dirt-Samples/")();
      var p2 = Data_Foldable.fold(Data_Foldable.foldableArray)(Loops.monoidPassage)([ v._808hc, v._808hc, v._808hc, v._808hc, v._808hc, v._808hc, v._808hc, v._808hc ]);
      var p1 = Data_Foldable.fold(Data_Foldable.foldableArray)(Loops.monoidPassage)([ v._808bd, v._808bd, Loops.silence, v._808bd, v._808sd, v._808bd, Loops.silence, v._808bd ]);
      var together = Loops.merge(p1)(p2);
      var looped = Loops.loop(Loops.BPM.create(Data_Rational.fromInt(240)))(together);
      var warped = Loops.warp(Loops.swing(20.0))(looped);
      return Loops.play(Loops.track(warped))();
  });
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
